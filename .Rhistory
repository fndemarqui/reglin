r2 <- residuals(mod) + coef(mod)[2]*pureza$percentual
cbind(r1, r2)
plot(cbind(r1, r2))
teste <- function(object){
mf <- stats::model.frame(object)
ylabel <- names(mf)[1]
mf <- mf[, -1, drop = FALSE]
X <- stats::model.matrix(object)
coefs <- coef(object)
if(colnames(X)[1] == "(Intercept)"){
X <- X[,-1, drop = FALSE]
coefs <- coefs[-1]
}
plots <- list()
p <- ncol(X)
r <- residuals(object)
labels <- names(coefs)
for(j in 1:p){
df <- tibble(
x = mf[,j],
y = r + coefs[j]*.data$x
)
plots[[j]] <- ggplot(df, aes(x = .data$x, y = .data$y)) +
geom_point() +
geom_abline(slope = coefs[j], color = "red") +
geom_smooth(se = FALSE) +
xlab(labels[j]) +
ylab(paste0("Component + Residual (", ylabel, ")"))
}
if(p>1){
gridExtra::grid.arrange(grobs = plots, ncol=2)
}else{
gridExtra::grid.arrange(grobs = plots)
}
}
teste(mod)
car::crPlot(mod)
car::crPlots(mod)
?residuals.lm
r <- residuals(mod)
r1 <- residuals(mod, type = "partial")
r2 <- residuals(mod) + coef(mod)[2]*pureza$percentual
cbind(r, r1, r2)
r <- residuals(mod)
r1 <- residuals(mod, type = "partial")
r2 <- residuals(mod) + coef(mod)[2]*pureza$percentual
r3 <- residuals(mod) + coef(mod)[2]
cbind(r, r1, r2, r3)
d <- r - r1
d
plot(pureza$percentual, d)
cbind(r, r1, r2, r3, d)
teste
teste(mod)
devtools::load_all(".")
ggresiduals(mod, "crPlots")
devtools::load_all(".")
ggresiduals(mod, "crPlots")
library(tidyverse)
library(reglin)
set.seed(1234567890)
n <- 100
cov <- data.frame(
x1 = rnorm(n),
x2 = rnorm(n),
x3 = exp(rnorm(n))
)
simdata <- rlm(~ x1 + x2 + log(x3), data = cov, beta = c(2.3, 0, 1.7, 1), sigma = 1)
glimpse(simdata)
# escala incorreda de x3:
fit <- lm(y ~ x1 + x2 + x3, data = simdata)
fit <- lm(tempo ~ ., data = entregas)
ggresiduals(fit, type = "crPlots")
car::crPlots(fit)
ggresiduals(fit, type = "crPlots")
usethis::use_git_ignore("inst/script_development.R")
usethis::use_build_ignore("inst/script_development.R")
roxygen2::roxygenize()
devtools::install()
devtools::load_all()
devtools::document(roclets = c('rd', 'collate', 'namespace'))
devtools::build_manual()
devtools::build_readme()
devtools::build_vignettes()
devtools::build_site()
usethis::use_github_action("pkgdown")
library(tidyverse)
library(reglin)
set.seed(1234567890)
n <- 100
cov <- data.frame(
x1 = rnorm(n),
x2 = rnorm(n),
x3 = exp(rnorm(n))
)
simdata <- rlm(~ x1 + x2 + log(x3), data = cov, beta = c(2.3, 0, 1.7, 1), sigma = 1)
glimpse(simdata)
# escala incorreda de x3:
fit <- lm(y ~ x1 + x2 + x3, data = simdata)
fit <- lm(tempo ~ ., data = entregas)
ggresiduals(fit, type = "crPlots")
# escala incorreda de x3:
fit <- lm(y ~ x1 + x2 + x3, data = simdata)
ggresiduals(fit, type = "crPlots")
car::crPlots(fit)
library(tidyverse)
library(reglin)
set.seed(1234567890)
n <- 100
cov <- data.frame(
x1 = rnorm(n),
x2 = rnorm(n),
x3 = exp(rnorm(n))
)
simdata <- rlm(~ x1 + x2 + log(x3), data = cov, beta = c(2.3, 0, 1.7, 1), sigma = 1)
glimpse(simdata)
# escala incorreda de x3:
fit <- lm(y ~ x1 + x2 + x3, data = simdata)
ggresiduals(fit, type = "crPlots")
ggresiduals(fit, type = "avPlots")
?ggresiduals
ggresiduals(fit, type = "default")
devtools::load_all(".")
install.packages("qqplotr")
install.packages("qqconf")
# usethis::use_vignette("reglin", "Introdução ao pacote reglin")
# usethis::use_vignette("simdata", "Simulação de dados com estrutura de regressão linear")
usethis::use_vignette("ggresiduals", "Análise de resíduos")
roxygen2::roxygenize()
devtools::install()
install.packages("qqconf")
library(tidyverse)
library(reglin)
set.seed(1234567890)
n <- 100
cov <- data.frame(
x1 = rnorm(n),
x2 = rnorm(n),
x3 = exp(rnorm(n))
)
simdata <- rlm(~ x1 + x2 + log(x3), data = cov, beta = c(2.3, 0, 1.7, 1), sigma = 1)
library(reglin)
library(tidyverse)
library(reglin)
set.seed(1234567890)
n <- 100
cov <- data.frame(
x1 = rnorm(n),
x2 = rnorm(n),
x3 = exp(rnorm(n))
)
simdata <- rlm(~ x1 + x2 + log(x3), data = cov, beta = c(2.3, 0, 1.7, 1), sigma = 1)
devtools::load_all(".")
install.packages(c("dials", "ggeffects", "ggpp", "git2r", "ranger", "sn", "tune"))
devtools::install()
?gginfluence
library(reglin)
roxygen2::roxygenize()
devtools::install()
devtools::load_all()
devtools::document(roclets = c('rd', 'collate', 'namespace'))
devtools::build_manual()
devtools::build_readme()
devtools::build_vignettes()
devtools::build_site()
usethis::use_github_action("pkgdown")
usethis::use_git_ignore(".Rhistory")
usethis::use_git_ignore("R/.Rhistory")
usethis::use_build_ignore(".Rhistory")
usethis::use_build_ignore("R/.Rhistory")
devtools::build_vignettes()
devtools::build_site()
usethis::use_github_action("pkgdown")
library(tidyverse)
library(reglin)
library(GGally)
set.seed(1234567890)
n <- 100
cov <- data.frame(
x1 = rnorm(n),
x2 = rnorm(n)
)
simdata <- rlm(~ x1 + x2, data = cov, beta = c(2.3, 1.7, 1), sigma = 1*x)
n <- 10
x <- rnorm(n, mean = 0, sigma = 1:n)
x <- rnorm(n, mean = 0, sd = 1:n)
x
var(x)
#' rlm: generation of data with a linear regression structure
#' @export
#' @aliases rlm
#' @param formula a formula containing the linear predictor.
#' @param data a data.frame containing the set of covariates entering the linear predictor
#' @param beta vector of regression coefficients
#' @param sigma error standard deviation
#' @return a data.frame containing the generated data
#'
rlm <- function(formula, data, beta, sigma){
if((length(sigma) != 1) & (length(sigma) != nrow(data))) stop("sigma must be numeric or of size n!")
mf <- stats::model.frame(formula=formula, data=data)
X <- stats::model.matrix(formula, data = mf)
n <- nrow(X)
p <- ncol(X)
if(length(beta) !=p ){
warning("X and beta are incompatible")
}
data$y = as.numeric(X%*%beta) + rnorm(n, 0, sigma)
return(data)
}
devtools::load_all(".")
rm(list = c("rlm"))
devtools::load_all(".")
set.seed(1234567890)
n <- 100
cov <- data.frame(
x1 = rnorm(n),
x2 = rnorm(n)
)
simdata <- rlm(~ x1 + x2, data = cov, beta = c(2.3, 1.7, 1), sigma = 1*x)
simdata <- rlm(~ x1 + x2, data = cov, beta = c(2.3, 1.7, 1), sigma = 1*x1)
simdata <- rlm(~ x1 + x2, data = cov, beta = c(2.3, 1.7, 1), sigma = 1*cov$x1)
cov$x1
simdata <- rlm(~ x1 + x2, data = cov, beta = c(2.3, 1.7, 1), sigma = cov$x1)
simdata <- rlm(~ x1 + x2, data = cov, beta = c(2.3, 1.7, 1), sigma = abs(cov$x1))
simdata <- rlm(~ x1 + x2, data = cov, beta = c(2.3, 1.7, 1), sigma = 1:2)
library(reglin)
set.seed(1234567890)
n <- 50
x <- 1:n
sigma <- 1
beta <- c(10, 1.5)
X <- cbind(1, x)
mu <- as.numeric(X%*%beta)
epsilon <- rnorm(n, mean = 0, sd = sigma*x)
y <- mu + epsilon
simdata <- data.frame(
x = x,
y = y
)
fit <- lm(y~x, data = simdata)
ggresiduals(fit)
roxygen2::roxygenize()
devtools::install()
devtools::build_vignettes()
devtools::build_site()
usethis::use_github_action("pkgdown")
usethis::use_git_ignore("inst/stuff")
usethis::use_build_ignore("inst/stuff")
usethis::use_mit_license()
usethis::use_github_action("pkgdown")
roxygen2::roxygenize()
devtools::install()
devtools::build_site()
devtools::build_readme()
devtools::build_site()
usethis::use_git_ignore("inst/stuff")
usethis::use_build_ignore("inst/stuff")
roxygen2::roxygenize()
devtools::install()
devtools::load_all()
devtools::document(roclets = c('rd', 'collate', 'namespace'))
devtools::build_manual()
devtools::build_vignettes()
devtools::build_readme()
devtools::build_site()
usethis::use_git_ignore("inst/stuff")
usethis::use_build_ignore("inst/stuff")
roxygen2::roxygenize()
devtools::install()
devtools::load_all()
devtools::document(roclets = c('rd', 'collate', 'namespace'))
usethis::use_git_ignore("inst/stuff")
usethis::use_build_ignore("inst/stuff")
roxygen2::roxygenize()
devtools::install()
devtools::load_all()
devtools::document(roclets = c('rd', 'collate', 'namespace'))
devtools::build_manual()
devtools::build()
devtools::build_vignettes()
devtools::build_readme()
devtools::build_site()
roxygen2::roxygenize()
devtools::install()
devtools::load_all()
devtools::document(roclets = c('rd', 'collate', 'namespace'))
library(tidyverse)
library(gganimate)
library(ggthemes)
library(gifski)
library(sn)
library(transformr)
animacoes = 50
size <- 200
library(tidyverse)
library(gganimate)
library(ggthemes)
library(gifski)
library(sn)
library(transformr)
animacoes = 50
size <- 200
dados <- tibble(
rep = rep(1:size, animacoes),
normal = as.vector(replicate(n = animacoes, rnorm(size), simplify = TRUE )),
tstudent = as.vector(replicate(n = animacoes, rt(size, df = 5), simplify = TRUE )),
`assimetria -` = as.vector(replicate(n = animacoes, rsn(size, alpha = -4), simplify = TRUE )),
`assimetria +` = as.vector(replicate(n = animacoes, rsn(size, alpha = 4), simplify = TRUE )),
) %>%
pivot_longer(2:5, names_to = "dist", values_to = "amostra")
glimpse(dados)
# criando a animação:
g <- ggplot(dados, aes(sample = amostra)) +
stat_qq() +
stat_qq_line(color = "blue") +
labs(x="theorical", y = "sample") +
facet_wrap(~dist, scales="free") +
transition_states(rep)
animate(g, fps=1, renderer = gifski_renderer())
animate(g, fps=0.1, renderer = gifski_renderer())
set.seed(1234567890)
n <- 100
simdata <- data.frame(
x1 = rnorm(n),
x2 = rnorm(n)
) |>
mutate(
y = rlm(~ x1 + x2, beta = c(2.3, 1.7, 1), sigma = 1*abs(x1))
)
fit <- lm(y ~ x1 + x2, data = simdata)
library(tidyverse)
library(reglin)
library(GGally)
set.seed(1234567890)
n <- 100
simdata <- data.frame(
x1 = rnorm(n),
x2 = rnorm(n)
) |>
mutate(
y = rlm(~ x1 + x2, beta = c(2.3, 1.7, 1), sigma = 1*abs(x1))
)
glimpse(simdata)
fit <- lm(y ~ x1 + x2, data = simdata)
ggresiduals(fit)
ggresiduals(fit)
library(GGally)
set.seed(1234567890)
n <- 100
n <- 100
simdata <- data.frame(
x1 = rnorm(n),
x2 = rnorm(n)
) |>
mutate(
y = rlm(~ x1 + x2, beta = c(2.3, 1.7, 1), sigma = 1*abs(x1))
)
library(tidyverse)
library(reglin)
library(GGally)
set.seed(1234567890)
n <- 100
simdata <- data.frame(
x1 = rnorm(n),
x2 = rnorm(n)
) |>
mutate(
y = rlm(~ x1 + x2, beta = c(2.3, 1.7, 1), sigma = 1*abs(x1))
)
glimpse(simdata)
fit <- lm(y ~ x1 + x2, data = simdata)
ggresiduals(fit)
testResiduals(fit)
library(tidyverse)
library(reglin)
library(GGally)
set.seed(1234567890)
n <- 100
simdata <- data.frame(
x1 = rnorm(n),
x2 = rnorm(n)
) |>
mutate(
y = rlm(~ x1 + x2, beta = c(2.3, 1.7, 1), sigma = 1*(x1^2))
)
glimpse(simdata)
fit <- lm(y ~ x1 + x2, data = simdata)
ggresiduals(fit)
testResiduals(fit)
library(tidyverse)
library(reglin)
library(GGally)
set.seed(1234567890)
n <- 1000
simdata <- data.frame(
x1 = rnorm(n),
x2 = rnorm(n)
) |>
mutate(
y = rlm(~ x1 + x2, beta = c(2.3, 1.7, 1), sigma = 1*(x1^2))
)
glimpse(simdata)
fit <- lm(y ~ x1 + x2, data = simdata)
ggresiduals(fit)
n <- 1000
simdata <- data.frame(
x1 = runif(n),
x2 = rnorm(n)
) |>
mutate(
y = rlm(~ x1 + x2, beta = c(2.3, 1.7, 1), sigma = 1*(x1^2))
)
glimpse(simdata)
fit <- lm(y ~ x1 + x2, data = simdata)
ggresiduals(fit)
testResiduals(fit)
testResiduals(fit)
devtools::load_all(".")
library(tidyverse)
library(reglin)
library(GGally)
set.seed(1234567890)
n <- 100
simdata <- data.frame(
x1 = runif(n),
x2 = rnorm(n)
) |>
mutate(
y = rlm(~ x1 + x2, beta = c(2.3, 1.7, 1), sigma = 1*(x1^2))
)
glimpse(simdata)
fit <- lm(y ~ x1 + x2, data = simdata)
ggresiduals(fit)
n <- 1000
simdata <- data.frame(
x1 = runif(n),
x2 = rnorm(n)
) |>
mutate(
y = rlm(~ x1 + x2, beta = c(2.3, 1.7, 1), sigma = 1*(x1^2))
)
glimpse(simdata)
fit <- lm(y ~ x1 + x2, data = simdata)
ggresiduals(fit)
testResiduals(fit)
usethis::use_git_ignore("inst/stuff")
usethis::use_build_ignore("inst/stuff")
roxygen2::roxygenize()
devtools::install()
devtools::load_all()
devtools::document(roclets = c('rd', 'collate', 'namespace'))
devtools::build_manual()
devtools::build()
devtools::build_vignettes()
devtools::build_readme()
devtools::build_site()
devtools::load_all(".")
set.seed(1234567890)
n <- 100
X <- cbind(1, rnorm(n))
beta <- c(1, 2)
epsilon <- rt(n, df = 2)
y <- as.numeric(X%*%beta) + epsilon
simdata <- data.frame(
x = x,
y = y
)
set.seed(1234567890)
n <- 100
x <- rnorm(n)
X <- cbind(1, x)
beta <- c(1, 2)
epsilon <- rt(n, df = 2)
y <- as.numeric(X%*%beta) + epsilon
simdata <- data.frame(
x = x,
y = y
)
glimpse(simdata)
library(tidyverse)
set.seed(1234567890)
n <- 100
x <- rnorm(n)
X <- cbind(1, x)
beta <- c(1, 2)
epsilon <- rt(n, df = 2)
y <- as.numeric(X%*%beta) + epsilon
simdata <- data.frame(
x = x,
y = y
)
glimpse(simdata)
fit <- lm(y~x, data = simdata)
ggresiduals(fit, type = "default")
devtools::load_all(".")
set.seed(1234567890)
n <- 100
x <- rnorm(n)
X <- cbind(1, x)
beta <- c(1, 2)
epsilon <- rt(n, df = 2)
y <- as.numeric(X%*%beta) + epsilon
simdata <- data.frame(
x = x,
y = y
)
glimpse(simdata)
fit <- lm(y~x, data = simdata)
ggresiduals(fit, type = "default")
testResiduals(fit)
devtools::load_all(".")
ggresiduals(fit)
